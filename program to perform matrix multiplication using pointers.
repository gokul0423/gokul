#include <stdio.h>

#define MAX 10 // Define maximum size for matrices

// Function to read a matrix
void readMatrix(int (*matrix)[MAX], int rows, int cols) {
    printf("Enter elements of the matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Function to print a matrix
void printMatrix(int (*matrix)[MAX], int rows, int cols) {
    printf("Matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Function to multiply two matrices
void multiplyMatrices(int (*matrix1)[MAX], int (*matrix2)[MAX], int (*result)[MAX], int rows1, int cols1, int cols2) {
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            result[i][j] = 0; // Initialize result element
            for (int k = 0; k < cols1; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j]; // Perform multiplication
            }
        }
    }
}

int main() {
    int rows1, cols1, rows2, cols2;
    int matrix1[MAX][MAX], matrix2[MAX][MAX], product[MAX][MAX];

    // Input dimensions of the matrices
    printf("Enter the number of rows and columns for Matrix 1 (rows cols): ");
    scanf("%d %d", &rows1, &cols1);
    
    printf("Enter the number of rows and columns for Matrix 2 (rows cols): ");
    scanf("%d %d", &rows2, &cols2);

    // Ensure the matrices can be multiplied
    if (cols1 != rows2) {
        printf("Matrix multiplication not possible. The number of columns of Matrix 1 must equal the number of rows of Matrix 2.\n");
        return 1;
    }

    // Read the matrices
    printf("Matrix 1:\n");
    readMatrix(matrix1, rows1, cols1);
    printf("Matrix 2:\n");
    readMatrix(matrix2, rows2, cols2);

    // Multiply the matrices
    multiplyMatrices(matrix1, matrix2, product, rows1, cols1, cols2);

    // Print the result
    printf("Product of the matrices:\n");
    printMatrix(product, rows1, cols2);

    return 0;
}
